import java.text.SimpleDateFormat
import java.util.stream.Collectors

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.1.0"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.3.1"
    id 'com.palantir.git-version' version '0.10.1'
    id 'ch.netzwerg.release' version '1.2.5'
}

repositories {
    mavenCentral()
}

apply plugin: 'org.jetbrains.intellij'
apply plugin: "java"
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

configurations {
    testAgent {
        transitive = false
    }
}

def ideaCacheDir = System.getProperty('user.home') + File.separator + 'intellij-gradle-cache'

intellij {
    version = ideaVersion
    type = ideaType
    updateSinceUntilBuild = false
    downloadSources = true
    plugins = ['Git4Idea', 'gr.jchrist.gitextender:0.4.1', 'PythonCore:2018.1.181.4203.550']
    ideaDependencyCachePath = ideaCacheDir
}

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
}

compileJava.options.encoding = encoding
compileTestJava.options.encoding = encoding

patchPluginXml {
    changeNotes "${file('change-notes.html').getText('UTF-8')}"
    pluginDescription "${file('description.html').getText('UTF-8')}"
}

jar {
    manifest {
        attributes(
            'Name': project.name,
            'Specification-Title': project.name,
            'Specification-Vendor': 'Lukasz Zielinski (zieluuuu@gmail.com)',
            'Specification-Version': project.version,
            'Implementation-Title': project.name,
            'Implementation-Vendor': 'Lukasz Zielinski (zieluuuu@gmail.com)',
            'Implementation-Version': versionDetails().gitHash,
            'Build-Date': buildTime()
        )
    }
}

release {
    tagPrefix = ''
    dependsOn buildPlugin
}

junitPlatform {
    filters {
        engines {
            include 'junit-jupiter'
            // exclude 'custom-engine'
        }
        tags {
            include 'fast', 'integration'
            // exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    enableStandardTestTask = true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    // logManager 'org.apache.logging.log4j.jul.LogManager'
}

test {
    //prevent running extensions as Junit 3 tests because of naming convention with TestCase
    exclude('zielu/junit5/**')
    reports {
        html.enabled = false
    }
}

apply plugin: 'jacoco'
jacoco {
    toolVersion = "${jacocoVersion}"
}

// workaround for missing coverage report with JUnit 5 (https://stackoverflow.com/a/44907857)
// as 'test' task cleans generated report
jacocoTestReport {
    executionData = files("${project.buildDir.name}/jacoco-junit5/test.exec")
}

junitPlatformTest {
    doFirst {
        def toString = { item -> String.valueOf(item) }
        //workaround for 'Path too long' on Windows (https://github.com/maiflai/gradle-scalatest/issues/42)
        def cp = classpath.getFiles().stream().map(toString).collect(Collectors.joining(File.pathSeparator))
        environment 'CLASSPATH', cp
        classpath = classpath.filter { false }
        jvmArgs "-javaagent:${configurations.testAgent.singleFile}=destfile=${project.buildDir.name}" +
                "/jacoco-junit5/test.exec"
    }
}

apply plugin: 'findbugs'
findbugs {
    toolVersion = "3.0.1"
    ignoreFailures = false
    effort = 'default'
    includeFilter = file("${projectDir}/config/findbugs/includeFilter.xml")
}

apply plugin: 'checkstyle'
checkstyle {
    toolVersion = "${checkstyleVersion}"
    maxErrors = 0
    maxWarnings = 0
    /*configFile = project(':').file('config/checkstyle/lax_checkstyle.xml')*/
    configProperties = [ "suppressionFile" : project(':').file('config/checkstyle/suppressions.xml')]
}

dependencies {

    checkstyle("com.puppycrawl.tools:checkstyle:${checkstyleVersion}")
    testAgent("org.jacoco:org.jacoco.agent:${jacocoVersion}:runtime")

    compile("org.jodd:jodd-core:${joddVersion}")
    compile("org.apache.commons:commons-lang3:${commonsLang3Version}")

    compileOnly('com.google.code.findbugs:jsr305:3.0.2')
    compileOnly('com.google.code.findbugs:findbugs:3.0.1')

    testCompile("org.mockito:mockito-core:${mockitoVersion}")
    testCompile 'name.falgout.jeffrey.testing.junit5:mockito-extension:1.0.0'
    testCompile("org.assertj:assertj-core:${assertjCoreVersion}")
    // JUnit 5
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testCompileOnly('org.apiguardian:apiguardian-api:1.0.0')
    // Only needed to run tests in an IntelliJ IDEA that bundles an older version
    // testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
    // testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageEngineVersion}")
    testCompile("org.eclipse.jgit:org.eclipse.jgit:${jgitVersion}")
}


def static buildTime() {
    def df = new SimpleDateFormat("yyyyMMdd.HHmmss")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}
